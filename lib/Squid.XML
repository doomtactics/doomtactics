<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Squid</name>
    </assembly>
    <members>
        <member name="M:Squid.Control.GetElements">
            <summary>
            Returns all child elements
            </summary>
            <returns></returns>
        </member>
        <member name="M:Squid.Control.Focus">
            <summary>
            Makes the control the focused control
            </summary>
        </member>
        <member name="M:Squid.Control.Initialize">
            <summary>
            Called by the constructor.
            Override this to initialize your custom control.
            Make sure you call base.Initialize
            </summary>
        </member>
        <member name="M:Squid.Control.OnUpdate">
            <summary>
            Called every frame.
            Override this to do per-frame operations
            </summary>
        </member>
        <member name="M:Squid.Control.OnLateUpdate">
            <summary>
            Called late every frame.
            Override this in special circumstances to do per-frame operations
            </summary>
        </member>
        <member name="M:Squid.Control.HandleKeyDown(Squid.KeyEventArgs)">
            <summary>
            Override this method to handle any keyevents passed to the control
            </summary>
        </member>
        <member name="M:Squid.Control.HandleKeyUp(Squid.KeyEventArgs)">
            <summary>
            Override this method to handle any keyevents passed to the control
            </summary>
        </member>
        <member name="M:Squid.Control.HandleAutoSize">
            <summary>
            Override this to implement your own AutoSize behvaviour
            </summary>
        </member>
        <member name="M:Squid.Control.DrawText(Squid.Style,System.Single)">
            <summary>
            Override this to draw text.
            </summary>
            <param name="style">The style to be used</param>
            <param name="opacity">The opacity to be used</param>
        </member>
        <member name="M:Squid.Control.DrawCustom">
            <summary>
            Override this to do additional drawing after the control has been drawn
            </summary>
        </member>
        <member name="M:Squid.Control.DrawStyle(Squid.Style,System.Single)">
            <summary>
            Override this to do additional drawing
            Call the base method to draw the control as usual
            </summary>
            <param name="style"></param>
            <param name="opacity"></param>
        </member>
        <member name="M:Squid.Control.Draw">
            <summary>
            Draws the control
            </summary>
        </member>
        <member name="M:Squid.Control.SetScissor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the scissor test rectangle
            </summary>
            <param name="x1">left screen coord</param>
            <param name="y1">top screen coord</param>
            <param name="x2">right screen coord</param>
            <param name="y2">bottom screen coord</param>
        </member>
        <member name="M:Squid.Control.ResetScissor">
            <summary>
            Resets the scissor test to whatever is was before the last SetScissor call
            </summary>
        </member>
        <member name="M:Squid.Control.Hit(System.Int32,System.Int32)">
            <summary>
            Return true if the point collides with the control
            </summary>
            <param name="x">x screen coord</param>
            <param name="y">y screen coord</param>
            <returns></returns>
        </member>
        <member name="M:Squid.Control.GetControlAt(System.Int32,System.Int32)">
            <summary>
            Returns the first control found below the given screen point
            Returns elements and controls
            </summary>
            <param name="x">x screen coord</param>
            <param name="y">y screen coord</param>
            <returns></returns>
        </member>
        <member name="M:Squid.Control.GetControl(System.String)">
            <summary>
            Returns the first control matching the given name.
            This method searches all siblings.
            </summary>
            <param name="name">Name of the control to find</param>
            <returns>Matching control</returns>
        </member>
        <member name="M:Squid.Control.GetControlAt(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the first control found below the given screen point
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="elements"></param>
            <returns></returns>
        </member>
        <member name="M:Squid.Control.DoDragDrop(Squid.Control)">
            <summary>
            Performs a drag drop operation
            </summary>
            <param name="data">The control to be displayed as dragged</param>
        </member>
        <member name="M:Squid.Control.IsChildOf(Squid.Control)">
            <summary>
            Returns true if the given control is a sibling of the control
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Squid.Control.Contains(Squid.Control)">
            <summary>
            Override this in custom controls to handle special cases
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Squid.Control.Click(System.Int32)">
            <summary>
            Fires the MouseClick event
            </summary>
        </member>
        <member name="M:Squid.Control.BringToFront">
            <summary>
            Makes the control the topmost control in its container
            </summary>
        </member>
        <member name="M:Squid.Control.Resize(Squid.Point,Squid.AnchorStyles)">
            <summary>
            Resize the control
            </summary>
            <param name="p">x and y values to resize the control by</param>
            <param name="style">defines on what edge the control should be resized</param>
            <returns></returns>
        </member>
        <member name="M:Squid.Control.DoKeyEvents">
            <summary>
            Process key events
            </summary>
        </member>
        <member name="M:Squid.Control.DoEvents">
            <summary>
            Process mouse events
            </summary>
        </member>
        <member name="P:Squid.Control.IsElement">
            <summary>
            Returns true if the control is a child element
            </summary>
        </member>
        <member name="P:Squid.Control.Depth">
            <summary>
            Returns the depth of the control
            </summary>
        </member>
        <member name="P:Squid.Control.Name">
            <summary>
            Name of the control
            </summary>
        </member>
        <member name="P:Squid.Control.Opacity">
            <summary>
            Opacity of the control
            This is muliplied with any style opacity and hierarchical opacity
            </summary>
        </member>
        <member name="P:Squid.Control.AutoSize">
            <summary>
            Gets/Sets the autosize behaviour
            </summary>
        </member>
        <member name="P:Squid.Control.AllowDrop">
            <summary>
            Gets/Sets wether or not the control processes OnDragDrop events
            </summary>
        </member>
        <member name="P:Squid.Control.AllowFocus">
            <summary>
            Gets/Sets wether or not the control is able to acquire focus
            </summary>
        </member>
        <member name="P:Squid.Control.Scissor">
            <summary>
            Gets/Sets wether or not hardware scissor test is used
            </summary>
        </member>
        <member name="P:Squid.Control.Dock">
            <summary>
            Gets/Sets the docking behaviour
            </summary>
        </member>
        <member name="P:Squid.Control.Style">
            <summary>
            Name of the ControlStyle 
            </summary>
        </member>
        <member name="P:Squid.Control.NoEvents">
            <summary>
            Gets/Sets wether or not the control is interactive and processes any events
            </summary>
        </member>
        <member name="P:Squid.Control.Tag">
            <summary>
            user defined data object
            </summary>
        </member>
        <member name="P:Squid.Control.UserData">
            <summary>
            user defined data object
            </summary>
        </member>
        <member name="P:Squid.Control.TabIndex">
            <summary>
            tab index
            </summary>
        </member>
        <member name="P:Squid.Control.Visible">
            <summary>
            Gets/Sets wether or not the control is visible
            </summary>
        </member>
        <member name="P:Squid.Control.Container">
            <summary>
            Returns the parent of the control as IControlContainer
            </summary>
        </member>
        <member name="P:Squid.Control.Cursor">
            <summary>
            Name of the cursor to use 
            </summary>
        </member>
        <member name="P:Squid.Control.Tooltip">
            <summary>
            Tooltip text 
            </summary>
        </member>
        <member name="P:Squid.Control.ZIndex">
            <summary>
            Returns the z-index
            </summary>
        </member>
        <member name="P:Squid.Control.Enabled">
            <summary>
            Gets/Sets wether or not the control, and all its children, is enabled
            </summary>
        </member>
        <member name="P:Squid.Control.Parent">
            <summary>
            Gets/Sets the parent
            </summary>
        </member>
        <member name="P:Squid.Control.MinSize">
            <summary>
            Gets/Setss the minimum size.
            This is only used during Control.Resize
            </summary>
        </member>
        <member name="P:Squid.Control.MaxSize">
            <summary>
            Gets/Setss the maximum size.
            This is only used during Control.Resize
            </summary>
        </member>
        <member name="P:Squid.Control.Size">
            <summary>
            Gets/Sets the size
            </summary>
        </member>
        <member name="P:Squid.Control.Position">
            <summary>
            Gets/Sets the position (relative to parent)
            </summary>
        </member>
        <member name="P:Squid.Control.Anchor">
            <summary>
            Gets/Sets the anchoring behaviour
            </summary>
        </member>
        <member name="P:Squid.Control.Margin">
            <summary>
            Defines the space around a control that keeps other controls at a specified distance from the control's borders.
            </summary>
        </member>
        <member name="P:Squid.Control.Padding">
            <summary>
            Defines the space inside of a control that keeps child controls at a specified distance from the control's borders.
            </summary>
        </member>
        <member name="P:Squid.Control.State">
            <summary>
            Gets/Sets the state
            </summary>
        </member>
        <member name="P:Squid.Control.FadeSpeed">
            <summary>
            Gets/Sets the local fading speed
            </summary>
        </member>
        <member name="P:Squid.Control.Location">
            <summary>
            Returns the screen position
            </summary>
        </member>
        <member name="P:Squid.Control.Desktop">
            <summary>
            Returns the desktop
            </summary>
        </member>
        <member name="P:Squid.Control.Animation">
            <summary>
            Use this to run animations as coroutines
            </summary>
        </member>
        <member name="M:Squid.BBCode.ConvertBBCodeToHTML(System.String)">
            <summary>
            A method to convert basic BBCode to HTML
            </summary>
            <param name="str">A string formatted in BBCode</param>
            <returns>The HTML representation of the BBCode string</returns>
        </member>
        <member name="P:Squid.ControlStyle.Tag">
            <summary>
            user data
            </summary>
        </member>
        <member name="P:Squid.ControlStyle.Tint">
            <summary>
            color to tint the texture (argb)
            </summary>
        </member>
        <member name="P:Squid.ControlStyle.TextColor">
            <summary>
            color for any text to be drawn (argb)
            </summary>
        </member>
        <member name="P:Squid.ControlStyle.BackColor">
            <summary>
            background color (argb)
            </summary>
        </member>
        <member name="P:Squid.ControlStyle.Opacity">
            <summary>
            opacity (0-1)
            </summary>
        </member>
        <member name="P:Squid.ControlStyle.Font">
            <summary>
            name of the font to use for text
            </summary>
        </member>
        <member name="P:Squid.ControlStyle.Texture">
            <summary>
            name of the texture to draw
            </summary>
        </member>
        <member name="P:Squid.ControlStyle.Tiling">
            <summary>
            texture tiling mode
            </summary>
        </member>
        <member name="P:Squid.ControlStyle.TextureUV">
            <summary>
            source rectangle of the texture expressed in uv coords
            </summary>
        </member>
        <member name="P:Squid.ControlStyle.TextPadding">
            <summary>
            text padding (distance to control borders)
            </summary>
        </member>
        <member name="P:Squid.ControlStyle.TextAlign">
            <summary>
            text alignment
            </summary>
        </member>
        <member name="P:Squid.ControlStyle.Grid">
            <summary>
            describes the 9sclice texture regions expressed as margin
            </summary>
        </member>
        <member name="M:Squid.GuiHost.SetClipboard(System.String)">
            <summary>
            sets the clipboard string
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Squid.GuiHost.GetClipboard">
            <summary>
            returns the current clipboard string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Squid.GuiHost.AddStyle(System.String,Squid.ControlStyle)">
            <summary>
            add an additional style
            this style will be handled seperately from any active skin
            </summary>
            <param name="name">name identifier of the style</param>
            <param name="style">the ControlStyle to add</param>
        </member>
        <member name="M:Squid.GuiHost.GetStyle(System.String)">
            <summary>
            returns the style with the given name
            </summary>
            <param name="name">the name to search for</param>
            <returns>matching ControlStyle</returns>
        </member>
        <member name="M:Squid.GuiHost.GenerateStandardSkin">
            <summary>
            generates a standard skin
            this is only used for sample purposes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Squid.GuiHost.MouseButton(System.Int32)">
            <summary>
            return the state of the given button index
            </summary>
            <param name="index">index of the button</param>
            <returns>state of the button</returns>
        </member>
        <member name="M:Squid.GuiHost.SetKeyboard(Squid.KeyData[])">
            <summary>
            sets the currently pressed and released keys
            </summary>
            <param name="keys">array of KeyData</param>
        </member>
        <member name="M:Squid.GuiHost.SetMouse(System.Int32,System.Int32,System.Int32)">
            <summary>
            sets the current mouse position
            </summary>
            <param name="posX">x component of the position</param>
            <param name="posY">y component of the position</param>
            <param name="scroll">scrollwheel delta</param>
        </member>
        <member name="M:Squid.GuiHost.SetButtons(System.Boolean[])">
            <summary>
            sets the state of mouse buttons
            </summary>
            <param name="buttons">array of booleans. true = button down</param>
        </member>
        <member name="T:Squid.RectanglePacker">
            <summary>Rectangle packer using an algorithm by Javier Arevalo</summary>
            <remarks>
              <para>
                Original code by Javier Arevalo (jare at iguanademos dot com). Rewritten
                to C# / .NET by Markus Ewald (cygon at nuclex dot org). The following comments
                were written by the original author when he published his algorithm.
              </para>
              <para>
                You have a bunch of rectangular pieces. You need to arrange them in a
                rectangular surface so that they don't overlap, keeping the total area of the
                rectangle as small as possible. This is fairly common when arranging characters
                in a bitmapped font, lightmaps for a 3D engine, and I guess other situations as
                well.
              </para>
              <para>
                The idea of this algorithm is that, as we add rectangles, we can pre-select
                "interesting" places where we can try to add the next rectangles. For optimal
                results, the rectangles should be added in order. I initially tried using area
                as a sorting criteria, but it didn't work well with very tall or very flat
                rectangles. I then tried using the longest dimension as a selector, and it
                worked much better. So much for intuition...
              </para>
              <para>
                These "interesting" places are just to the right and just below the currently
                added rectangle. The first rectangle, obviously, goes at the top left, the next
                one would go either to the right or below this one, and so on. It is a weird way
                to do it, but it seems to work very nicely.
              </para>
              <para>
                The way we search here is fairly brute-force, the fact being that for most
                offline purposes the performance seems more than adequate. I have generated a
                japanese font with around 8500 characters and all the time was spent generating
                the bitmaps.
              </para>
              <para>
                Also, for all we care, we could grow the parent rectangle in a different way
                than power of two. It just happens that power of 2 is very convenient for
                graphics hardware textures.
              </para>
              <para>
                I'd be interested in hearing of other approaches to this problem. Make sure
                to post them on http://www.flipcode.com
              </para>
            </remarks>
        </member>
        <member name="F:Squid.RectanglePacker.packingAreaWidth">
            <summary>Maximum allowed width of the packing area</summary>
        </member>
        <member name="F:Squid.RectanglePacker.packingAreaHeight">
            <summary>Maximum allowed height of the packing area</summary>
        </member>
        <member name="M:Squid.RectanglePacker.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new rectangle packer</summary>
            <param name="packingAreaWidth">Maximum width of the packing area</param>
            <param name="packingAreaHeight">Maximum height of the packing area</param>
        </member>
        <member name="M:Squid.RectanglePacker.Pack(System.Int32,System.Int32)">
            <summary>Tries to allocate space for a rectangle in the packing area</summary>
            <param name="rectangleWidth">Width of the rectangle to allocate</param>
            <param name="rectangleHeight">Height of the rectangle to allocate</param>
            <param name="placement">Output parameter receiving the rectangle's placement</param>
            <returns>True if space for the rectangle could be allocated</returns>
        </member>
        <member name="M:Squid.RectanglePacker.optimizePlacement(Squid.Point@,System.Int32,System.Int32)">
            <summary>
              Optimizes the rectangle's placement by moving it either left or up to fill
              any gaps resulting from rectangles blocking the anchors of the most optimal
              placements.
            </summary>
            <param name="placement">Placement to be optimized</param>
            <param name="rectangleWidth">Width of the rectangle to be optimized</param>
            <param name="rectangleHeight">Height of the rectangle to be optimized</param>
        </member>
        <member name="M:Squid.RectanglePacker.selectAnchorRecursive(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Searches for a free anchor and recursively enlarges the packing area
              if none can be found.
            </summary>
            <param name="rectangleWidth">Width of the rectangle to be placed</param>
            <param name="rectangleHeight">Height of the rectangle to be placed</param>
            <param name="testedPackingAreaWidth">Width of the tested packing area</param>
            <param name="testedPackingAreaHeight">Height of the tested packing area</param>
            <returns>
              Index of the anchor the rectangle is to be placed at or -1 if the rectangle
              does not fit in the packing area anymore.
            </returns>
        </member>
        <member name="M:Squid.RectanglePacker.findFirstFreeAnchor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Locates the first free anchor at which the rectangle fits</summary>
            <param name="rectangleWidth">Width of the rectangle to be placed</param>
            <param name="rectangleHeight">Height of the rectangle to be placed</param>
            <param name="testedPackingAreaWidth">Total width of the packing area</param>
            <param name="testedPackingAreaHeight">Total height of the packing area</param>
            <returns>The index of the first free anchor or -1 if none is found</returns>
        </member>
        <member name="M:Squid.RectanglePacker.isFree(Squid.RectanglePacker.PackingRectangle@,System.Int32,System.Int32)">
            <summary>
              Determines whether the rectangle can be placed in the packing area
              at its current location.
            </summary>
            <param name="rectangle">Rectangle whose position to check</param>
            <param name="testedPackingAreaWidth">Total width of the packing area</param>
            <param name="testedPackingAreaHeight">Total height of the packing area</param>
            <returns>True if the rectangle can be placed at its current position</returns>
        </member>
        <member name="M:Squid.RectanglePacker.insertAnchor(Squid.Point)">
            <summary>Inserts a new anchor point into the anchor list</summary>
            <param name="anchor">Anchor point that will be inserted</param>
            <remarks>
              This method tries to keep the anchor list ordered by ranking the anchors
              depending on the distance from the top left corner in the packing area.
            </remarks>
        </member>
        <member name="F:Squid.RectanglePacker.actualPackingAreaWidth">
            <summary>Current width of the packing area</summary>
        </member>
        <member name="F:Squid.RectanglePacker.actualPackingAreaHeight">
            <summary>Current height of the packing area</summary>
        </member>
        <member name="F:Squid.RectanglePacker.packedRectangles">
            <summary>Rectangles contained in the packing area</summary>
        </member>
        <member name="F:Squid.RectanglePacker.anchors">
            <summary>Anchoring points where new rectangles can potentially be placed</summary>
        </member>
        <member name="T:Squid.RectanglePacker.AnchorRankComparer">
            <summary>Compares the 'rank' of anchoring points</summary>
            <remarks>
              Anchoring points are potential locations for the placement of new rectangles.
              Each time a rectangle is inserted, an anchor point is generated on its upper
              right end and another one at its lower left end. The anchor points are kept
              in a list that is ordered by their closeness to the upper left corner of the
              packing area (their 'rank') so the packer favors positions that are closer to
              the upper left for new rectangles.
            </remarks>
        </member>
        <member name="F:Squid.RectanglePacker.AnchorRankComparer.Default">
            <summary>Provides a default instance for the anchor rank comparer</summary>
        </member>
        <member name="M:Squid.RectanglePacker.AnchorRankComparer.Compare(Squid.Point,Squid.Point)">
            <summary>Compares the rank of two anchors against each other</summary>
            <param name="left">Left anchor point that will be compared</param>
            <param name="right">Right anchor point that will be compared</param>
            <returns>The relation of the two anchor point's ranks to each other</returns>
        </member>
        <member name="T:Squid.Resizer">
            <summary>
            Summary
            </summary>
        </member>
        <member name="T:Squid.Style">
            <summary>
            Describes the visual appearance of a control
            </summary>
        </member>
        <member name="P:Squid.Style.Tag">
            <summary>
            user data
            </summary>
        </member>
        <member name="P:Squid.Style.TextColor">
            <summary>
            color for any text to be drawn (argb)
            </summary>
        </member>
        <member name="P:Squid.Style.Font">
            <summary>
            name of the font to use for text
            </summary>
        </member>
        <member name="P:Squid.Style.TextPadding">
            <summary>
            text padding (distance to control borders)
            </summary>
        </member>
        <member name="P:Squid.Style.TextAlign">
            <summary>
            text alignment
            </summary>
        </member>
        <member name="P:Squid.Style.Tint">
            <summary>
            color to tint the texture (argb)
            </summary>
        </member>
        <member name="P:Squid.Style.BackColor">
            <summary>
            background color (argb)
            </summary>
        </member>
        <member name="P:Squid.Style.Opacity">
            <summary>
            opacity (0-1)
            </summary>
        </member>
        <member name="P:Squid.Style.Texture">
            <summary>
            name of the texture to draw
            </summary>
        </member>
        <member name="P:Squid.Style.TextureUV">
            <summary>
            source rectangle of the texture expressed in uv coords
            </summary>
        </member>
        <member name="P:Squid.Style.Grid">
            <summary>
            describes the 9sclice texture regions expressed as margin
            </summary>
        </member>
        <member name="P:Squid.Style.Tiling">
            <summary>
            enables/disables the 9sclice grid
            </summary>
        </member>
    </members>
</doc>
